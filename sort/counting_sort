class CountinSort
  def number_counter(array)
    buckets = Array.new(array.max + 1, 0)

    array.each do |index|
      buckets[index] += 1
    end

    buckets
  end

  def sum(data)
    @previous = 0
    data.each do |number|
      number += @previous
      @previous += number
    end

    result = Array.new(10, 0)
    @prev = 0

    data.each_with_index do |number, index|
      result[index] = @prev + number
      @prev += number
    end

    result
  end

  def real_sort(data)
    result = []

    index_data = sum(number_counter(data))

    data.each do |number|
      new_index = index_data[number]
      index_data[number] -= 1
      result[new_index] = number
    end

    result.compact
  end
end

RSpec.describe CountinSort do
  let (:countinsort) { CountinSort.new }
  it "take a count array to store the count of each unique object" do
    input_data = [1, 4, 1, 2, 7, 5, 2]

    expect(countinsort.number_counter(input_data)).to eq([0, 2, 2, 0, 1, 1, 0, 1])
  end

  it "modify the count array such that each element at each index " do
    input_data = [0, 2, 2, 0, 1, 1, 0, 1, 0, 0]

    expect(countinsort.sum(input_data)).to eq([0, 2, 4, 4, 5, 6, 6, 7, 7, 7])
  end

  it "counting number_counter result" do
    input_data = [1, 4, 1, 2, 7, 5, 2]

    expect(countinsort.real_sort(input_data)).to eq([1, 1, 2, 2, 4, 5, 7])
  end
end
